import pandas as pd
import sqlite3
import os
import re

def clean_table_name(name):
    """
    清理字符串，使其成为一个有效的SQL表名。
    - 移除非法字符 (只保留字母, 数字, 和下划线)。
    - 将连续的空格或非法字符序列替换为单个下划线。
    - 确保表名不以数字开头 (如果是，则在前面加上 "T_")。
    """
    # 将所有非字母数字字符替换为下划线
    name = re.sub(r'[^a-zA-Z0-9]', '_', name)
    # 将多个连续的下划线替换为单个下划线
    name = re.sub(r'_+', '_', name)
    # 如果表名以数字开头，则在前面添加前缀
    if name and name[0].isdigit():
        name = 'T_' + name
    return name

def consolidate_xlsx_to_sqlite(source_folder, db_path):
    """
    将指定文件夹中的所有XLSX文件导入到一个SQLite数据库中。

    每个Excel文件中的每个工作表都将成为数据库中的一个单独的表。
    表名将由 "文件名_工作表名" 组成。

    :param source_folder: 包含XLSX文件的文件夹路径。
    :param db_path: 要创建或连接的SQLite数据库的文件路径。
    """
    print(f"开始将 '{source_folder}' 中的Excel文件整合到 '{db_path}'...")
    
    # 检查源文件夹是否存在
    if not os.path.isdir(source_folder):
        print(f"错误：源文件夹 '{source_folder}' 不存在。请检查路径是否正确。")
        return

    try:
        # 连接到SQLite数据库 (如果文件不存在，则会自动创建)
        conn = sqlite3.connect(db_path)
        print("成功连接到数据库。")

        # 获取文件夹下所有xlsx文件的列表
        xlsx_files = [f for f in os.listdir(source_folder) if f.endswith('.xlsx')]

        if not xlsx_files:
            print("在指定文件夹中未找到任何 .xlsx 文件。")
            return

        print(f"找到 {len(xlsx_files)} 个Excel文件，准备开始处理...")

        # 遍历文件夹中的每个xlsx文件
        for filename in xlsx_files:
            file_path = os.path.join(source_folder, filename)
            try:
                print(f"\n--- 正在处理文件: {filename} ---")
                # 使用pandas读取Excel文件，'None'表示读取所有工作表
                xls_sheets = pd.read_excel(file_path, sheet_name=None)

                # 遍历文件中的每个工作表
                for sheet_name, df in xls_sheets.items():
                    if df.empty:
                        print(f"  - 工作表 '{sheet_name}' 为空，已跳过。")
                        continue

                    # 从文件名（不含扩展名）和工作表名创建表名
                    base_filename = os.path.splitext(filename)[0]
                    table_name = clean_table_name(f"{base_filename}_{sheet_name}")

                    print(f"  - 正在将工作表 '{sheet_name}' 的数据写入数据库表 '{table_name}'...")
                    
                    # 将DataFrame数据写入SQLite数据库中的表
                    # if_exists='replace': 如果表已存在，则先删除再创建。
                    # 您也可以用 'append' 来追加数据，或者用 'fail' 在表存在时报错。
                    df.to_sql(table_name, conn, if_exists='replace', index=False)
                    
                    print(f"  - 成功写入 {len(df)} 条记录。")

            except Exception as e:
                print(f"处理文件 {filename} 时发生错误: {e}")

    except sqlite3.Error as e:
        print(f"数据库连接或操作时发生错误: {e}")
    finally:
        # 确保最后关闭数据库连接
        if 'conn' in locals() and conn:
            conn.close()
            print("\n数据库连接已关闭。")
    
    print("所有文件处理完毕！")


if __name__ == '__main__':
    # --- 用户配置区域 ---

    # 1. 设置包含您的 .xlsx 文件的文件夹路径。
    #    - '.' 代表当前脚本所在的文件夹。
    #    - 您也可以使用绝对路径，例如: r'C:\Users\YourUser\Documents\Excel_Files' (Windows)
    #    - 或者: '/home/user/data/excel_files' (Linux/macOS)
    excel_source_directory = '.'

    # 2. 设置您希望生成的SQLite数据库的文件名。
    #    可以包含路径，例如 'data/output.db'
    database_filename = 'my_consolidated_database.db'

    # --- 执行主函数 ---
    consolidate_xlsx_to_sqlite(excel_source_directory, database_filename)
